/**
 * File:	include/ftpd/dialogs.ycp
 * Package:	Configuration of ftpd
 * Summary:	Dialogs definitions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 */

{

textdomain "ftp-server";

import "CWM";
import "CWMServiceStart";
import "DialogTree";
import "Label";
import "Wizard";
import "FtpServer";
import "Popup";
import "CWMFirewallInterfaces";

include "ftp-server/helps.ycp";
include "ftp-server/wid_functions.ycp";




/**
 * Function for disable back button
 * @param string key
 */

void BackButton (string key) {
     Wizard::SetTitleIcon("yast-ftp-server");
     UI::ChangeWidget(`id(`back), `Enabled, false);
}




/**
 * Returns whether user confirmed aborting the configuration.
 *
 * @return boolean result
 */
define boolean AbortDialog () {
  return Popup::YesNoHeadline(
    // TRANSLATORS: popup headline
    _("Aborting FTP Configuration"),
    // TRANSLATORS: popup message
    _("All changes will be lost. Really abort configuration?"));
}

/**
 * Init function where are added UI hadle functions 
 * Start widget (vsftpd)
 *
 * @return map<string,any> map for start-up widget
 */


map<string,any> StartMode () {
  map<string,any> result = $[];
  result["get_service_auto_start"] = GetEnableService;
  result["set_service_auto_start"] = SetEnableService;
  result["get_service_start_via_xinetd"] = GetStartedViaXinetd;
  result["set_service_start_via_xinetd"] = SetStartedViaXinetd;
  //TRANSLATORS: Radio selection
  result["start_auto_button"] = _("&When booting");
  result["start_manual_button"] =  _("&Manually");
  result["start_xinetd_button"] = _("Via &xinetd");
  result["help"] = sformat (CWMServiceStart::AutoStartHelpXinetdTemplate (),
              _("When Booting"), _("Manually"), _("Via xinetd"));
  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Perform Settings widget
 *
 * @return map<string,any> map for Perform Settings widget
 */

map<string,any> PerformSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`VBox();
  result["init"] = InitPerSettings;
  result["store"] = StorePerforSettings;
  result["help"] = DialogHelpText("per_settings");
  
  return result;
   
}

/**
 * Init function where are added UI hadle functions 
 * Start widget
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> StartStop () {
  map<string,any> result = $[];
  result["service_id"] = "vsftpd";
  result["service_running_label"] = _("ftp is running");
  result["service_not_running_label"] = _("ftp is not running");
  result["start_now_button"] = _("&Start FTP Now");
  result["stop_now_button"] = _("S&top FTP Now");
  result["save_now_action"] = SaveAndRestartVsftpd;
  result["save_now_button"] = _("Sa&ve Settings and Restart FTP Now");
  result["start_now_action"] = StartNowVsftpd;
  result["stop_now_action"] = StopNowVsftpd;
  result["help"] = sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now"));

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Start widget (pure-ftpd)
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> StartStopPure () {
  map<string,any> result = $[];
  result["service_id"] = "pure-ftpd";
  result["service_running_label"] = _("ftp is running");
  result["service_not_running_label"] = _("ftp is not running");
  result["start_now_button"] = _("&Start FTP Now");
  result["stop_now_button"] = _("S&top FTP Now");
  result["save_now_action"] = SaveAndRestartPure;
  result["save_now_button"] = _("Sa&ve Settings and Restart FTP Now");
  result["start_now_action"] = StartNowPure;
  result["stop_now_action"] = StopNowPure;
  result["help"] = sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Start FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Stop FTP daemon Now"),
	    // part of help text - push button label, NO SHORTCUT!!!
	    _("Save Settings and Restart FTP daemon Now"));

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * Start widget radiobuttons for switching daemons
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> RBVsftpdPureftpd () {
  map<string,any> result = $[];
  result["label"] = _("Selected Service");
  result["widget"] = `radio_buttons;
  result["items"] = [
            [ "vs_item", _("&vsftpd") ],
            [ "pure_item", _("p&ure-ftpd") ]
	    ];
  result["init"] = InitRBVsPure;
  result["handle"] = HandleRBVsPure;
  result["help"] = DialogHelpText("selected_services");

  return result;
}



/**
 * Init function where are added UI hadle functions 
 * special hack widget where is handlig disable back button
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> DisBackButton () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`Empty();
  result["init"] = BackButton;
  result["help"] = " ";

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * special hack widget where is handlig Start/Stop button
 *
 * @return map<string,any> map for start-stop widget
 */

map<string,any> StartStopRestart () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`Empty();
  result["init"] = InitStartStopRestart;
  result["help"] = " ";



  return result;
}


/**
 *-----------================= GENERAL SCREEN =============----------
 *
 */


/*
 * Init function where are added UI hadle functions 
 * General Settings widget
 *
 * @return map<string,any> map for General Settings widget
 

map<string,any> GenSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitGenSettings;
  result["handle"] = HandleGenSettings;
  result["store"] = StoreGenSettings;
  result["validate_type"] = `function;
  result["validate_function"] = GenValid;
  result["help"] = DialogHelpText("gen_settings");

  return result;
}
*/

/**
 * Wellcome Message for vsftpd
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */

map<string,any> Banner () {
  map<string,any> result = $[];

  result["label"] = _("&Welcome message");
  result["widget"] = `textentry;
  result["init"] = InitBanner;
  result["store"] = StoreBanner;
  result["help"] = DialogHelpText("Banner");

  return result;
}

/**
 * Chroot Everyone
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */

map<string,any> ChrootEnable () {
  map<string,any> result = $[];

  result["label"] = _("&Chroot Everyone");
  result["widget"] = `checkbox;
  result["init"] = InitChrootEnable;
  result["store"] = StoreChrootEnable;
  result["help"] = DialogHelpText("ChrootEnable");

  return result;
}

/**
 * Verbos Logging
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */

map<string,any>  VerboseLogging() {
  map<string,any> result = $[];

  result["label"] = _("&Verbose Logging");
  result["widget"] = `checkbox;
  result["init"] = InitVerboseLogging;
  result["store"] = StoreVerboseLogging;
  result["help"] = DialogHelpText("VerboseLogging");

  return result;
}

/**
 * Umask (umask files:umask dirs) only pure-ftpd
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> Umask () {
  map<string,any> result = $[];

  result["label"] = _("&Umask (umask files:umask dirs)");
  result["widget"] = `textentry;
  result["init"] = InitUmask;
  result["store"] = StoreUmask;
  result["validate_type"] = `function;
  result["validate_function"] = ValidUmask;
  result["help"] = DialogHelpText("Umask");

  return result;
}

/**
 * Umask for Anonynous for vsftpd
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> UmaskAnon () {
  map<string,any> result = $[];

  result["label"] = _("&Umask for Anonymous");
  result["widget"] = `textentry;
  result["init"] = InitUmaskAnon;
  result["store"] = StoreUmaskAnon;
  result["help"] = DialogHelpText("UmaskAnon");

  return result;
}




/**
 * Umask for Authenticated Users for vsftpd
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> UmaskLocal () {
  map<string,any> result = $[];

  result["label"] = _("Uma&sk for Authenticated Users");
  result["widget"] = `textentry;
  result["init"] = InitUmaskLocal;
  result["store"] = StoreUmaskLocal;
  result["help"] = DialogHelpText("UmaskLocal");

  return result;
}

/**
 * Ftp Directory for Anonymous Users
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> FtpDirAnon () {
  map<string,any> result = $[];

  result["label"] = _("Ftp Directory for Anon&ymous Users");
  result["widget"] = `textentry;
  result["init"] = InitFtpDirAnon;
  result["validate_type"] = `function;
  result["validate_function"] = ValidFtpDirAnon;
  result["store"] = StoreFtpDirAnon;
  result["help"] = DialogHelpText("FtpDirAnon");

  return result;
}


/**
 * "Browse" button for FTP Dir Anon
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> BrowseAnon () {
  map<string,any> result = $[];

  result["label"] = _("Brows&e");
  result["widget"] = `push_button;
  result["handle"] = HandleBrowseAnon;
  result["help"] = _(" ");

  return result;
}


/**
 * Ftp Directory for Authenticated Users
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> FtpDirLocal () {
  map<string,any> result = $[];

  result["label"] = _("&Ftp Directory for Authenticated Users");
  result["widget"] = `textentry;
  result["init"] = InitFtpDirLocal;
  result["store"] = StoreFtpDirLocal;
  result["help"] = DialogHelpText("FtpDirLocal");

  return result;
}


/**
 * "Browse" button for FTP Dir Local/Authenticated
 * General Settings widget
 *
 * @return map<string,any> map for General screen
 */


map<string,any> BrowseLocal () {
  map<string,any> result = $[];

  result["label"] = _("Br&owse");
  result["widget"] = `push_button;
  result["handle"] = HandleBrowseLocal;
  result["help"] = _(" ");

  return result;
}


/**
 *-----------================= PERFORMANCE SCREEN =============----------
 *
 */



/*
 * Init function where are added UI hadle functions 
 * Perform Settings widget
 *
 * @return map<string,any> map for Perform Settings widget
 

map<string,any> PerformSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] =`VBox();
  result["init"] = InitPerSettings;
  result["store"] = StorePerforSettings;
  result["help"] = DialogHelpText("per_settings");
  
  return result;
   
}
*/


/**
 * Max Idle Time [minutes]
 * Performance Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> MaxIdleTime () {
  map<string,any> result = $[];

  result["label"] = _("&Max Idle Time [minutes]");
  result["widget"] = `intfield;
  result["minimum"] = 0;
  result["maximum"] = 1440;
  result["init"] = InitMaxIdleTime;
  result["store"] = StoreMaxIdleTime;
  result["help"] = DialogHelpText("MaxIdleTime");

  return result;
}



/**
 * Max Clients for One IP
 * Performance Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> MaxClientsPerIP () {
  map<string,any> result = $[];

  result["label"] = _("Max Cli&ents for One IP");
  result["widget"] = `intfield;
  result["minimum"] = 0;
  result["maximum"] = 50;
  result["init"] = InitMaxClientsPerIP;
  result["store"] = StoreMaxClientsPerIP;
  result["help"] = DialogHelpText("MaxClientsPerIP");

  return result;
}


/**
 * Max Clients
 * Performance Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> MaxClientsNumber () {
  map<string,any> result = $[];

  result["label"] = _("Ma&x Clients");
  result["widget"] = `intfield;
  result["minimum"] = 0;
  result["maximum"] = 9999;
  result["init"] = InitMaxClientsNumber;
  result["store"] = StoreMaxClientsNumber;
  result["help"] = DialogHelpText("MaxClientsNumber");

  return result;
}


/**
 * Local Max Rate [KB/s]
 * Performance Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> LocalMaxRate () {
  map<string,any> result = $[];

  result["label"] = _("&Local Max Rate [KB/s]");
  result["widget"] = `intfield;
  result["minimum"] = 0;
  result["maximum"] = 10000000;
  result["init"] = InitLocalMaxRate;
  result["store"] = StoreLocalMaxRate;
  result["help"] = DialogHelpText("LocalMaxRate");

  return result;
}


/**
 * Anonymous Max Rate [KB/s]
 * Performance Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> AnonMaxRate () {
  map<string,any> result = $[];

  result["label"] = _("Anonymous Max &Rate [KB/s]");
  result["widget"] = `intfield;
  result["minimum"] = 0;
  result["maximum"] = 10000000;
  result["init"] = InitAnonMaxRate;
  result["store"] = StoreAnonMaxRate;
  result["help"] = DialogHelpText("AnonMaxRate");

  return result;
}

/**
 *-----------================= Authentication SCREEN =============----------
 *
 */


/**
 * Enable/Disable Anonymous and Local Users
 * Authentication Settings widget
 *
 * @return map<string,any> map for Performance screen
 */


map<string,any> AnonAuthen () {
  map<string,any> result = $[];

  result["label"] = _("Enable/Disable Anonymous and Local Users");
  result["widget"] = `radio_buttons;
  result["items"] = [
    ["anon_only", _("Anonymo&us Only")],
    ["local_only", _("Aut&henticated Users Only")],
    ["both", _("&Both")],
  ];
  result["init"] = InitAnonAuthen;
  result["store"] = StoreAnonAuthen;
  result["help"] = DialogHelpText("AnonAuthen");

  return result;
}

/**
 * Enable Upload
 * Authentication Settings widget
 *
 * @return map<string,any> map for Performance screen
 */

map<string,any>  EnableUpload () {
  map<string,any> result = $[];

  result["label"] = _("&Enable Upload");
  result["widget"] = `checkbox;
  result["init"] = InitEnableUpload;
  result["handle"] = HandleEnableUpload;
  result["store"] = StoreEnableUpload;
  result["help"] = DialogHelpText("EnableUpload");

  return result;
}


/**
 * Anonymous Can Upload
 * Authentication Settings widget
 *
 * @return map<string,any> map for Performance screen
 */

map<string,any>  AnonReadOnly () {
  map<string,any> result = $[];

  result["label"] = _("Anon&ymous Can Upload");
  result["widget"] = `checkbox;
  result["init"] = InitAnonReadOnly;
  result["store"] = StoreAnonReadOnly;
  result["handle"] = HandleAnonReadOnly;
  result["help"] = DialogHelpText("AnonReadOnly");

  return result;
}



/**
 * Anonymous Can Create Directories
 * Authentication Settings widget
 *
 * @return map<string,any> map for Performance screen
 */

map<string,any> AnonCreatDirs () {
  map<string,any> result = $[];

  result["label"] = _("Anonymou&s Can Create Directories");
  result["widget"] = `checkbox;
  result["init"] = InitAnonCreatDirs;
  result["store"] = StoreAnonCreatDirs;
  result["handle"] = HandleAnonCreatDirs;
  result["help"] = DialogHelpText("AnonCreatDirs");

  return result;
}


/**
 *-----------================= EXPERT SETTINGS SCREEN =============----------
 *
 */


/*
 * Init function where are added UI hadle functions 
 * Expert Settings widget (vsftpd)
 *
 * @return map<string,any> map for Expert Settings widget
 

map<string,any> VSFTPDSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitVSFTPAddSettings;
  result["validate_type"] = `function;
  result["validate_function"] = ValidVSFTPExpSettings;
  result["store"] = StoreVSFTPDSettings;
  result["handle"] = HandleVSFTPExpertSettings;
  result["help"] = DialogHelpText("vsftpd_settings");

  return result;
}

*/

/**
 * Enable Pass&ive Mode
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any>  PassiveMode () {
  map<string,any> result = $[];

  result["label"] = _("Enable Pass&ive Mode");
  result["widget"] = `checkbox;
  result["init"] = InitPassiveMode;
  result["store"] = StorePassiveMode;
  result["handle"] = HandlePassiveMode;
  result["help"] = DialogHelpText("PassiveMode");

  return result;
}



/**
 * Min Port for Pas. Mode
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any> PasMinPort () {
  map<string,any> result = $[];

  result["label"] = _("&Min Port for Pas. Mode");
  result["widget"] = `intfield;
  result["minimum"] = 1024;
  result["maximum"] = 65535;
  result["init"] = InitPasMinPort;
  result["store"] = StorePasMinPort;
  result["help"] = DialogHelpText("PasMinPort");

  return result;
}



/**
 * Max Port for Pas. Mode
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any> PasMaxPort () {
  map<string,any> result = $[];

  result["label"] = _("Max P&ort for Pas. Mode");
  result["widget"] = `intfield;
  result["minimum"] = 1024;
  result["maximum"] = 65535;
  result["init"] = InitPasMaxPort;
  result["store"] = StorePasMaxPort;  
  result["validate_type"] = `function;
  result["validate_function"] = ValidPasMaxPort;
  result["help"] = DialogHelpText("PasMaxPort");

  return result;
}



/**
 * Enable SSL
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any>  SSLEnable () {
  map<string,any> result = $[];

  result["label"] = _("Enab&le SSL");
  result["widget"] = `checkbox;
  result["init"] = InitSSLEnable;
  result["store"] = StoreSSLEnable;
  result["handle"] = HandleSSLEnable;
  result["help"] = DialogHelpText("SSLEnable");

  return result;
}

/**
 * Enable TLS
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any>  TLS () {
  map<string,any> result = $[];

  result["label"] = _("Enable &TLS");
  result["widget"] = `checkbox;
  result["init"] = InitTLS;
  result["store"] = StoreTLS;
  result["help"] = DialogHelpText("TLS");

  return result;
}


/**
 * DSA Certificate to Use for SSL Encrypted Connections
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any> CertFile () {
  map<string,any> result = $[];

  result["label"] = _("D&SA Certificate to Use for SSL Encrypted Connections");
  result["widget"] = `textentry;
  result["init"] = InitCertFile;
  result["validate_type"] = `function;
  result["validate_function"] = ValidCertFile;
  result["store"] = StoreCertFile;
  result["help"] = DialogHelpText("CertFile");

  return result;
}


/**
 * "Browse" button for DSA Certificate
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any> BrowseCertFile () {
  map<string,any> result = $[];

  result["label"] = _("Br&owse");
  result["widget"] = `push_button;
  result["handle"] = HandleBrowseCertFile;
  result["help"] = _(" ");

  return result;
}




/**
 * Disable Downloading Unvalidated Data
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any>  AntiWarez () {
  map<string,any> result = $[];

  result["label"] = _("Disable Downloading &Unvalidated Data");
  result["widget"] = `checkbox;
  result["init"] = InitAntiWarez;
  result["store"] = StoreAntiWarez;
  result["help"] = DialogHelpText("AntiWarez");

  return result;
}


/**
 * Security Settings
 * Expert Settings widget
 *
 * @return map<string,any> map for Expert screen
 */


map<string,any> SSL () {
  map<string,any> result = $[];

  result["label"] = _("Security Settings");
  result["widget"] = `radio_buttons;
  result["items"] = [
    ["disable", _("Disable SSL/&TLS")],
    ["accept", _("Accept &SSL and TLS")],
    ["refuse", _("&Refuse Conections Without SSL/TLS")],
  ];
  result["init"] = InitSSL;
  result["validate_type"] = `function;
  result["validate_function"] = ValidSSL;
  result["store"] = StoreSSL;
  result["help"] = DialogHelpText("SSL");

  return result;
}

/**
 *-----------================= SCREENS OF FTP_SERVER =============----------
 *
 */


/*
 * Init function where are added UI hadle functions 
 * Expert Settings widget (pure-ftpd)
 *
 * @return map<string,any> map for Expert Settings widget
 *

map<string,any> PUREFTPDAddSettings () {
  map<string,any> result = $[];

  result["widget"] = `custom;
  result["custom_widget"] = `VBox();
  result["init"] = InitPUREFTPTAddSettings;
  result["validate_type"] = `function;
  result["validate_function"] = ValidPUREFTPExpSettings;
  result["store"] = StorePUREFTPDSettings;
  result["help"] = DialogHelpText("pureftpd_settings");

  return result;
}

*/




/**
 * Init function where are added UI hadle functions 
 * Start widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for start_up widget
 */


map<string,any> start_up () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    "StartMode",
    `VSpacing(1),
    // disabling start/stop buttons when it doesn't make sense
    (Mode::normal() ? "StartStop":`Empty()),
    `VSpacing(1),
    "RBVsPureFTPd",
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP Start-Up");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Start-Up");
  result["widget_names"] = [ "DisBackButton", "StartMode", "StartStop", "RBVsPureFTPd", "StartStopRestart"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * General Settings widget (vsftpd)
 * define for tabs_vsftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for General Settings widget
 */

map<string,any> gen_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    `Frame ( _("General Settings"),`HBox(`HSpacing(1),`VBox(
      `Left("Banner"),
      `Left("ChrootEnable"),
      `Left("VerboseLogging"),
      `Left(`HBox (
        `Left("UmaskAnon"),
        `Left("UmaskLocal")
      ))
    ))),
    `VSpacing(1),
    `Frame ( _("FTP Directories"),`HBox(`HSpacing(1),`VBox(
      `Left(`HBox(`HSpacing(1),
        `Left("FtpDirAnon"), 
        `VBox(
          `Left(`Label("")),
          `Left("BrowseAnon")
         )
      )),
      `Left(`HBox(`HSpacing(1),
        `Left("FtpDirLocal"),
        `VBox(
          `Left(`Label("")),
          `Left("BrowseLocal")
        )
      ))
    ))),
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP General Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("General");
  result["widget_names"] = [ "DisBackButton", "Banner",
                             "ChrootEnable", "VerboseLogging", "UmaskAnon", 
                             "UmaskLocal", "BrowseAnon", "BrowseLocal",
                             "FtpDirAnon", "FtpDirLocal"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * General Settings widget (pure-ftpd)
 * define for tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for General Settings widget
 */

map<string,any> gen_settings_pure () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    `Frame ( _("General Settings"),`HBox(`HSpacing(1),`VBox(
      `Left("ChrootEnable"),
      `Left("VerboseLogging"),
      `Left("Umask")
    ))),
    `VSpacing(1),
    `Frame ( _("FTP Directories"),`HBox(`HSpacing(1),`VBox(
      `Left(`HBox(`HSpacing(1),
        `Left("FtpDirAnon"),
        `VBox(
          `Left(`Label("")),
          `Left("BrowseAnon")
        )
      ))
    ))),
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] =  _("FTP General Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("General");
  result["widget_names"] = [ "DisBackButton", "ChrootEnable", "VerboseLogging",
                             "Umask", "FtpDirAnon", "BrowseAnon"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Performance Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Performance Settings widget
 */


map<string,any> perfor_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (
    `Frame ( _("General Settings"),`HBox(`HSpacing(1),`VBox(
      `Left(`MinWidth(20,"MaxIdleTime")),
      `Left(`MinWidth(20,"MaxClientsPerIP")),
      `Left(`MinWidth(20,"MaxClientsNumber"))
    ))),
    `VSpacing(1),
    `Frame ( _("FTP Directories"),`HBox(`HSpacing(1),`VBox(
      `Left(`MinWidth(20,"LocalMaxRate")),
      `Left(`MinWidth(20,"AnonMaxRate"))
    ))),
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Performance Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Performance");
  result["widget_names"] = [ "DisBackButton", "MaxClientsPerIP", "MaxIdleTime",
                           "AnonMaxRate", "LocalMaxRate", "MaxClientsNumber",];

  return result;
}


/**
 * Init function where are added firewall
 *
 * @return map<string,any> map for firewall settings
 */


map<string,any> FirewallSettingsPure () {
  map<string,any> result = $[];

  result["services"] = [ "service:pure-ftpd" ];
  result["display_details"] = true;

  return result;
}

/**
 * Init function where are added firewall
 *
 * @return map<string,any> map for firewall settings
 */


map<string,any> FirewallSettingsVs () {
  map<string,any> result = $[];

  result["services"] = [ "service:vsftpd" ];
  result["display_details"] = true;

  return result;
}


/**
 * Init function where are added UI hadle functions 
 * Anonymous Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Anonymous Settings widget
 */

map<string,any> anon_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
   "AnonAuthen",
    `VSpacing(1),
    `Frame ( _("Uploading"),`HBox(`HSpacing(1),`VBox(
      `Left("AnonReadOnly"),
      `Left("AnonCreatDirs")
    ))),
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Anonymous Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Authentication");
  result["widget_names"] = [ "DisBackButton", "AnonAuthen",
                             "AnonReadOnly", "AnonCreatDirs"];

  return result;
}

/**
 * Init function where are added UI hadle functions 
 * Anonymous Settings widget
 * define for tabs_vsftpd/tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Anonymous Settings widget
 */

map<string,any> vsftpd_anon_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    "AnonAuthen",
    `VSpacing(1),
    `Frame ( _("Uploading"),`HBox(`HSpacing(1),`VBox(
      `Left("EnableUpload"),
      `HBox(`HSpacing(2),`VBox(
        `Left("AnonReadOnly"),
	`Left("AnonCreatDirs")
      ))
    ))),
    `VStretch ()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Anonymous Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Authentication");
  result["widget_names"] = [ "DisBackButton",  "AnonAuthen", "EnableUpload",
                             "AnonReadOnly", "AnonCreatDirs"];

  return result;
}
/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (vsftpd)
 * define for tabs_vsftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> addit_settings () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    `Frame ( _("Passive Mode"),		
      `HBox(`HSpacing(1), `VBox(
        `Left("PassiveMode"),
	`HBox(`HSpacing(2), `Left(`HSquash(`HBox(
	  "PasMinPort",
	  "PasMaxPort",
	`HStretch()
        ))))
      ))
    ), //end of `Frame ( "Passiv Mode Settings"    
    `VSpacing(1),
    `Frame(_("Enab&le SSL"),
    //`CheckBoxFrame(`id("SSLEnable"), _("Enab&le SSL"), true,	
      `HBox(`HSpacing(1),`VBox (
        `Left("SSLEnable"),
        `HBox(`HSpacing(2),`VBox (
	  `Left("TLS"),
	  `Left(`HBox(
	    "CertFile",
	    `VBox ( `Label(""),
	      "BrowseCertFile"
	    )
	  )) // end of `Left(`HBox(
        )) // end of `HBox(`HSpacing(1),`VBox (
      )) // end of `HBox(`HSpacing(1),`VBox (
    ), //end of `CheckBoxFrame(`id("SSLEnable"), "Sec&urity Settings", true
    `VSpacing(1),
    `Frame ( _("SUSEfirewall Settings"),
      `HBox(`HSpacing(1),
	"Firewall"
      )),
    `VStretch()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Expert Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Expert Settings");
  result["widget_names"] = [ "DisBackButton",  "Firewall", "PasMinPort",  "PasMaxPort",
    			     "TLS", "CertFile", "BrowseCertFile", 
                             "PassiveMode", "SSLEnable" ];

  return result;
}
/**
 * Init function where are added UI hadle functions 
 * Expert Settings widget (pure-ftpd)
 * define for tabs_pureftpd necessary later in screens (CWNTree)
 *
 * @return map<string,any> map for Expert Settings widget
 */

map<string,any> addit_settings_pure () {
  map<string,any> result = $[];

  result["contents"] = `VBox (		
    `Frame ( _("Passive Mode"),
     `HBox(`HSpacing(1), `Left(`HSquash(`HBox(
       "PasMinPort",
       "PasMaxPort",
       `HStretch()
      ))))
    ), 
    `VSpacing(1),
    `Frame ( _("Additional Settings"),
      `HBox(`HSpacing(1),`VBox (				
	`Left("AntiWarez")
      ))
    ), //end of `Frame ( _("Additional Settings")	       
    `VSpacing(1),
    "SSL",
    `VSpacing(1),
    `Frame ( _("SUSEfirewall Settings"),
      `HBox(`HSpacing(1),
	"Firewall"
      )
    ),
    `VStretch()
  );
  // TRANSLATORS: part of dialog caption
  result["caption"] = _("FTP Expert Settings");
  // TRANSLATORS: tree menu item
  result["tree_item_label"] = _("Expert Settings");
  result["widget_names"] = [ "DisBackButton", "Firewall", "PasMinPort", 
                             "PasMaxPort", "AntiWarez", "SSL",];

  return result;
}





/**
 * map for description of widget later in CWNTree
 * widget_descr (vsftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string,map<string,any> > wid_handling_vsftpd = $[
    
    "StartMode" : CWMServiceStart::CreateAutoStartWidget ( StartMode ()),
    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStop ()),
    "DisBackButton" : DisBackButton (),
    "RBVsPureFTPd" : RBVsftpdPureftpd (),
    "StartStopRestart": StartStopRestart (),

    "Banner" : Banner(),
    "ChrootEnable" : ChrootEnable (),
    "VerboseLogging" : VerboseLogging(),
    "UmaskAnon" : UmaskAnon(),
    "UmaskLocal" : UmaskLocal(),
    "FtpDirAnon" : FtpDirAnon (),
    "BrowseAnon" : BrowseAnon (),
    "FtpDirLocal" : FtpDirLocal (),
    "BrowseLocal" : BrowseLocal (),

    "MaxIdleTime" : MaxIdleTime (),
    "MaxClientsPerIP" : MaxClientsPerIP (),
    "MaxClientsNumber" : MaxClientsNumber (),
    "LocalMaxRate" : LocalMaxRate (),
    "AnonMaxRate" : AnonMaxRate (),

    "AnonAuthen" : AnonAuthen (),
    "EnableUpload" : EnableUpload (),
    "AnonReadOnly" : AnonReadOnly (),
    "AnonCreatDirs" : AnonCreatDirs (),

    "PassiveMode" : PassiveMode (),
    "PasMinPort" : PasMinPort (),
    "PasMaxPort" : PasMaxPort (),
    "SSLEnable" : SSLEnable (),
    "TLS" : TLS (),
    "CertFile" : CertFile (),
    "BrowseCertFile" : BrowseCertFile (),
    "Firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget (FirewallSettingsVs()),
    
  ];


/**
 * map for screens of widget later in CWNTree
 * screens (vsftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string, map<string,any> > tabs_vsftpd = $[
  
    "start_up"  : start_up (),
    "gen_settings" : gen_settings (),
    "perfor_settings" :perfor_settings (),
    "anon_settings" : vsftpd_anon_settings (),
    "addit_settings" : addit_settings (),

  ];

/**
 * function for running CWNTree
 * 
 * abort functions for confirm abort
 * 
 */
map<symbol,any> functions = $[
   `abort : AbortDialog,
];


/**
 * function for running CWNTree
 * vsftpd
 *
 * @return symbol return value of DialogTree::ShowAndRun
 */



  symbol RunFTPDialogsVsftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_vsftpd,
	"widget_descr"	: wid_handling_vsftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::CancelButton(),
	"next_button"	: Label::FinishButton(),
	"functions"	: functions,
    ]);
  }

/**
 * map for description of widget later in CWNTree
 * widget_descr (pure-ftpd)
 *
 * @return map<string,map<string,any> >
 */

map<string,map<string,any> > wid_handling_pureftpd = $[

    "DisBackButton" : DisBackButton (),
    "StartStopRestart": StartStopRestart (),

    "StartMode" : CWMServiceStart::CreateAutoStartWidget (StartMode ()),
    "StartStop" : CWMServiceStart::CreateStartStopWidget (StartStopPure ()),
    "RBVsPureFTPd" : RBVsftpdPureftpd (),

    "ChrootEnable" : ChrootEnable (),
    "VerboseLogging" : VerboseLogging(),
    "Umask" : Umask (),
    "FtpDirAnon" : FtpDirAnon (),
    "BrowseAnon" : BrowseAnon (),

    "MaxIdleTime" : MaxIdleTime (),
    "MaxClientsPerIP" : MaxClientsPerIP (),
    "MaxClientsNumber" : MaxClientsNumber (),
    "LocalMaxRate" : LocalMaxRate (),
    "AnonMaxRate" : AnonMaxRate (),

    "AnonAuthen" : AnonAuthen (),
    "AnonReadOnly" : AnonReadOnly (),
    "AnonCreatDirs" : AnonCreatDirs (),

    "PasMinPort" : PasMinPort (),
    "PasMaxPort" : PasMaxPort (),
    "AntiWarez" : AntiWarez (),
    "SSL" : SSL (),
    "Firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget (FirewallSettingsPure()),
  ];


/**
 * map for screens of widget later in CWNTree
 * screens (pure-ftpd)
 *
 * @return map<string,map<string,any> >
 */

  map<string, map<string,any> > tabs_pureftpd = $[
  
    "start_up"  : start_up (),

    "gen_settings" : gen_settings_pure (),

    "perfor_settings" :perfor_settings (),

    "anon_settings" : anon_settings (),

    "addit_settings" : addit_settings_pure (),

  ];

/**
 * function for running CWNTree
 * vsftpd
 *
 * @return symbol return value of DialogTree::ShowAndRun
 */

  symbol RunFTPDialogsPureftpd() {
    list<string> sim_dialogs = ["start_up", "gen_settings", "perfor_settings", "anon_settings", "addit_settings"];

    return DialogTree::ShowAndRun ($[
	"ids_order"	: sim_dialogs,
	"initial_screen": "start_up",
	"screens"	: tabs_pureftpd,
	"widget_descr"	: wid_handling_pureftpd,
	"back_button"	: Label::BackButton(),
	"abort_button"	: Label::CancelButton(),
	"next_button"	: Label::FinishButton(),
	"functions"	: functions,
    ]);
  }



/* EOF */
}
