/**
 * File:	modules/FtpServer.ycp
 * Package:	Configuration of FtpServer
 * Summary:	FtpServer settings, input and output functions
 * Authors:	Jozef Uhliarik <juhliarik@suse.cz>
 *
 * $Id: FtpServer.ycp 27914 2006-02-13 14:32:08Z juhliarik $
 *
 * Representation of the configuration of FtpServer.
 * Input and output routines.
 */

{

module "FtpServer";
textdomain "ftp-server";

import "Progress";
import "Report";
import "Summary";
import "Message";
import "Popup";
import "String";
import "Mode";
import "Package";
import "CommandLine";
import "Users";
import "SuSEFirewall";
import "SuSEFirewallServices";
import "PortAliases";

/**
 * Prototypes
 */
global boolean Modified();

global boolean WriteToEditMap (string key, string value);

global boolean WriteSettings ();

global boolean WriteUpload (); 

global boolean WriteXinetd ();

/**
 * Data was modified?
 */
global boolean modified = false;

/**
 * general variable for proposal
 * 
 */
global boolean proposal_valid = false;

/**
 * variable signifies if vsftpd is selected and 
 * edited via ftp-server (YaST module)
 * global boolean variable
 */
global boolean vsftpd_edit = false;

/**
 * variable signifies if vsftpd is installed and 
 * 
 * global boolean variable
 */
global boolean vsftpd_installed = false;

/**
 * variable signifies if pure-ftpd is installed and 
 * 
 * global boolean variable
 */
global boolean pureftpd_installed = false;

/**
 * variable signifies position vsftpd record
 * in structur Inetd::netd_conf  
 * -1 init value before calling Inetd::Read() 
 *
 * global integer variable
 */
global integer vsftpd_xined_id = -1;

/**
 * variable signifies if pure-ftpd is installed and 
 * in structur Inetd::netd_conf  
 * -1 init value before calling Inetd::Read() 
 * 
 * global integer variable
 */
global integer pureftpd_xined_id = -1;

/**
 * variable signifies if daemon will be started via xinetd
 * 
 * global boolean variable
 */

global boolean start_xinetd = false;

/**
 * variable signifies if daemon is running via xinetd
 * 
 * global boolean variable
 */

global boolean pure_ftp_xinetd_running = false;


/**
 * variable signifies if daemon is running via xinetd
 * 
 * global boolean variable
 */

global boolean vsftp_xinetd_running = false;

/**
 * variable signifies if daemon will be stoped in xinetd
 * 
 * global boolean variable
 */

global boolean stop_daemon_xinetd = false;



/**
 * variable signifies if it is create upload dir
 * only for vsftpd and anonymous connections with allowed upload
 *
 * global boolean variable
 */

global boolean create_upload_dir = false;

/**
 * variable signifies if upload dir has good permissions
 * only for vsftpd and anonymous connections with allowed upload
 *
 * global boolean variable
 */

global boolean upload_good_permission = false;

/**
 * variable signifies if upload dir for anonymous has good permissions
 * it is only for pure-ftpd
 *
 * -1 == home dir is "/"
 *  0 == writting access disallow
 *  1 == writting allowed
 * global integer variable
 */

global integer pure_ftp_allowed_permissios_upload = 0;

/**
 * variable signifies if user choose change permissions for home dir
 * for anonymous connections with allowed upload
 *
 * global boolean variable
 */

global boolean change_permissions = false;

/**
 * variable signifies home dir for anonymous user
 * 
 * global string variable
 */


global string anon_homedir = "";

/**
 * variable signifies uid for anonymous user
 * 
 * global integer variable
 */

global integer anon_uid = 0;

/**
 * variable signifies sleep time during reading settings
 * 
 * internal integer variable
 */

integer sl = 500;

/**
 * variable includes user info about anonymous user
 * 
 * internal map variable
 */
map userinfo = $[]; 

/**
 * list includes xinetd server_args for pure-ftpd
 * 
 * global lis <string> variable
 */

global list <string> pure_ftpd_xinet_conf =[];


/**
 * list of keys from map DEFAULT_CONFIG
 *  
 * global list <string>
 */
     
global list <string> UI_keys = ["ChrootEnable","VerboseLogging","FtpDirLocal","FtpDirAnon", "Umask", 
"UmaskAnon", "UmaskLocal", "PasMinPort", "PasMaxPort", "MaxIdleTime", "MaxClientsPerIP",
"MaxClientsNumber", "LocalMaxRate", "AnonMaxRate", "AnonAuthen", "AnonReadOnly",
"AnonCreatDirs", "Banner", "SSLEnable", "TLS", "AntiWarez", "SSL", "StartXinetd", 
"PassiveMode", "CertFile", "VirtualUser", "FTPUser", "GuestUser", "EnableUpload"];

/**
 * map of deafult values for options in UI
 *  
 * global map <string, string >
 */

global map <string, string > DEFAULT_CONFIG = $[
     "ChrootEnable"              : "NO",
     "VerboseLogging"        	 : "NO",
     "FtpDirLocal"             	 : "",  //if empty doesn't write this options via SCR
     "FtpDirAnon"             	 : "",  //if empty doesn't write this options via SCR
     "Umask"               	 : "",
     "UmaskAnon"                 : "",
     "UmaskLocal"           	 : "",
     "PasMinPort"      		 : "40000",
     "PasMaxPort"                : "40500",
     "MaxIdleTime"    		 : "15",
     "MaxClientsPerIP"           : "3",
     "MaxClientsNumber"      	 : "10",
     "LocalMaxRate"		 : "0",
     "AnonMaxRate"		 : "0",
     "AnonAuthen"		 : "1",  // 0 => anonymous only, 1 => authenticated only, 2=> both
     "AnonReadOnly"		 : "YES",
     "AnonCreatDirs"		 : "NO",
     "Banner"			 : _("Welcome message"),
     "SSLEnable"		 : "NO",
     "TLS"			 : "YES",
     "AntiWarez"		 : "YES",
     "SSL"			 : "0", //0 - disable SSL, 1-accept SSL, 2 - refuse connection withou SSL (pure-ftpd only)
     "StartXinetd"		 : "NO",
     "StartDaemon"		 : "0",  //0 = start manually, 1 = start when booting, 2 = start via xinetd
     "PassiveMode"		 : "YES",
     "CertFile"			 : "",   //cert file for SSL connections
     "VirtualUser"		 : "NO",
     "FTPUser"			 : "ftp",
     "GuestUser"		 : "",
     "EnableUpload"		 : "NO",
     
];

/**
 * map <string, string > of pure-ftpd settings
 *    
 */
global map <string, string > PURE_SETTINGS = $[];


/**
 * map <string, string > of vsftpd settings
 *    
 */
global map <string, string > VS_SETTINGS = $[];

/**
 * map <string, string > of vsftpd settings
 *    
 */
global map <string, string > EDIT_SETTINGS = $[];



include "ftp-server/write_load.ycp";

/**
 * Read current pure-ftpd configuration
 *
 *  @return boolean successfull
 */
boolean ReadPUREFTPDSettings () {
    foreach (string key,  SCR::Dir(.pure-ftpd), {
	string val = (string) SCR::Read(add(.pure-ftpd, key));
	//string val = (string) select((list <string>) SCR::Read(add(.pure-ftpd, key)), 0, "");
        if (val != nil) PURE_SETTINGS[key] = val;
    });

    y2milestone("-------------PURE_SETTINGS-------------------");  
    y2milestone("pure-ftpd configuration has been read: %1", PURE_SETTINGS);
    y2milestone("---------------------------------------------");


    return true;
}

/**
 * Read current vsftpd configuration
 *
 *  @return boolean successfull
 */

boolean ReadVSFTPDSettings () {
    foreach (string key,  SCR::Dir(.vsftpd), {
	string val = (string) SCR::Read(add(.vsftpd, key));
	//string val = (string) select((list <string>) SCR::Read(add(.pure-ftpd, key)), 0, "");
        if (val != nil) VS_SETTINGS[key] = val;
    });
    y2milestone("-------------VS_SETTINGS-------------------");  
    y2milestone("VSFTPD configuration has been read: %1", VS_SETTINGS);
    y2milestone("---------------------------------------------");


    return true;
}


/**
 * Read vsftpd configuration
 * existing upload file and permissions
 *
 *  @return boolean successfull
 */


boolean ReadVSFTPDUpload () {
  boolean result = false;
  string command = "";
  if (anon_homedir !="")
     command = "ls -l "+anon_homedir+ " | grep upload";
  if (command != "") {
     map options = (map)SCR::Execute (.target.bash_output, command);
     y2milestone("[ftp-server] (ReadVSFTPDUpload) command for existing upload dir:  %1  output: %2",command, options);       
     if (options["exit"]:nil ==  0)
        result = true;
     else
        result = false;
     if (result) {
        //Popup::Message("Work ReadVSFTPDUpload");
        create_upload_dir = true;
        string permissions =  substring (tostring(options["stdout"]:nil),0,10);
        string w = filterchars (permissions, "w");
        string r = filterchars (permissions, "r");
        if ((size(w) <3) || (size(r) <3)) {
           upload_good_permission = false;
           //Popup::Message("good permissions");
        } else {
           upload_good_permission = true;
           //Popup::Message("wrong permissions");
        }
     } 
  }
  
  return result;
}


/**
 * Read pure-fptd configuration
 * checking permissions for upload
 *
 *  @return boolean successfull
 */


boolean ReadPermisionUplaod () {

  boolean result = false;
  string command = "";
  string directory = "";
  string upload_dir = "";

  list <string> directories = filter(string key, splitstring(anon_homedir, "/"), {return (key != "");});
  
  y2milestone("[ftp-server] (ReadPermisionUplaod) split directories...:  %1 ",directories);

  if (size(directories) == 1 ) {
     directory = "/";
     upload_dir = deletechars(anon_homedir,"/");
    
  } else if (size(directories) > 1 ) {
     upload_dir = directories[(size(directories)-1)]:"";
     //Popup::Message(upload_dir);
     directory = "/" + mergestring(remove(directories, (size(directories)-1)), "/");
     //Popup::Message(directory);
  } else {
     pure_ftp_allowed_permissios_upload = -1;
     
  }

  
  if ((anon_homedir !="") && (pure_ftp_allowed_permissios_upload != -1))
     command = "ls -l "+directory+ " | grep "+ upload_dir;
  if (command != "") {
     map options = (map)SCR::Execute (.target.bash_output, command);
     y2milestone("[ftp-server] (ReadPermisionUplaod) command for checking permissions for upload dir:  %1",command);       
     if (options["exit"]:nil ==  0)
        result = true;
     else
        result = false;
     if (result) {
        string permissions =  substring (tostring(options["stdout"]:nil),0,10);
        string w = filterchars (permissions, "w");
        string r = filterchars (permissions, "r");
        if ((size(w) <3) || (size(r) <3)) {
           pure_ftp_allowed_permissios_upload = 0;
           //Popup::Message("good permissions");
        } else {
           pure_ftp_allowed_permissios_upload = 1;
           //Popup::Message("wrong permissions");
        }
     }
     //Popup::Message(tostring(pure_ftp_allowed_permissios_upload)); 
  }
  return result;


}

/**
 * Remap current pure -FtpServer configuration
 * to temporary structure
 *
 * @return boolean successfull
 */

boolean InitEDIT_SETTINGS () {
   foreach (string key, UI_keys, {
       string val = ValueUI(key, false);
       if (val != nil) EDIT_SETTINGS[key] = val;
       //if (val == nil) Popup::Message(key);; 
   });

   y2milestone("-------------EDIT_SETTINGS-------------------");  
   y2milestone("EDIT_SETTINGS configuration has been read: %1", EDIT_SETTINGS);
   y2milestone("---------------------------------------------");

   return true;
}




/**
 * Read current configuration
 *
 * @return boolean successfull
 */
boolean ReadSettings () {
  boolean result = false;
  if (vsftpd_edit) {
     result = ReadVSFTPDSettings();
  } else {
     result = ReadPUREFTPDSettings();  
  }
  if (result) {
        result = InitEDIT_SETTINGS ();
  }

  //read info about anonymous user "ftp"
  Users::SetGUI (false);
  if ((Users::Read () == "") && (EDIT_SETTINGS["VirtualUser"]:nil == "NO")) {
     if ((vsftpd_edit) && (EDIT_SETTINGS["GuestUser"]:nil != "") 
        && (EDIT_SETTINGS["FtpDirLocal"]:nil == "")) {
        //Popup::Message("if ((vsftpd_edit) && (EDIT_SETTINGS");
        Users::SelectUserByName (EDIT_SETTINGS["GuestUser"]:nil);
        userinfo = Users::GetCurrentUser ();
        string guest_home_dir = (string) userinfo["homeDirectory"]:nil;
        if ((guest_home_dir != "") && (guest_home_dir != nil) 
           && (EDIT_SETTINGS["FtpDirLocal"]:nil == ""))
	   EDIT_SETTINGS["FtpDirLocal"] = guest_home_dir;
     }
     Users::SelectUserByName (EDIT_SETTINGS["FTPUser"]:nil);
     userinfo = Users::GetCurrentUser ();
     anon_homedir = (string) userinfo["homeDirectory"]:nil;
     anon_uid     = (integer) userinfo["uidNumber"]:nil;
     //y2milestone("-------------User info-------------------");  
     //y2milestone("Users :CurrentUser %1", userinfo);
     //y2milestone("---------------------------------------------");
     if ((anon_homedir != "") && (anon_homedir != nil)) {
        if (EDIT_SETTINGS["FtpDirAnon"]:nil == "")
	   EDIT_SETTINGS["FtpDirAnon"] = anon_homedir;
	else if (EDIT_SETTINGS["FtpDirAnon"]:nil != nil)
	   anon_homedir = EDIT_SETTINGS["FtpDirAnon"]:nil;
     }
  }
  //read firewall settings
  boolean progress_orig = Progress::set (false);
  SuSEFirewall::Read ();
  Progress::set (progress_orig);
  //read existing upload directory for vsftpd
  if (vsftpd_edit)
     result = ReadVSFTPDUpload ();

  result = ReadPermisionUplaod ();
  return result;
}


/**
 * Write pure-ftpd configuration to config file
 *
 * @return boolean successfull
 */
boolean WritePUREFTPDSettings () {

  foreach (string option_key, string option_val, PURE_SETTINGS, {
	SCR::Write(add(.pure-ftpd, option_key), option_val);
    });
    // This is very important
    // it flushes the cache, and stores the configuration on the disk
    SCR::Write(.pure-ftpd, nil);

    return true;
}


/**
 * Write vsftpd configuration to config file
 *
 * @return boolean successfull
*/
boolean WriteVSFTPDSettings () {

  foreach (string option_key, string option_val, VS_SETTINGS, {
	SCR::Write(add(.vsftpd, option_key), option_val);
    });
    // This is very important
    // it flushes the cache, and stores the configuration on the disk
    SCR::Write(.vsftpd, nil);

    return true;
}



/**
 * Remap UI pure-ftpd or vsftpd configuration
 * to write structure for SCR
 *
 * @return boolean successfull
*/

boolean WriteToSETTINGS () {
   foreach (string key, UI_keys, {
       ValueUI(key, true);
   });

   y2milestone("-------------PURE_SETTINGS-------------------");  
   y2milestone("pure-ftpd writing configuration : %1", PURE_SETTINGS);
   y2milestone("---------------------------------------------");

   y2milestone("-------------VS_SETTINGS-------------------");  
   y2milestone("Vsftpd writing configuration : %1", VS_SETTINGS);
   y2milestone("---------------------------------------------");
   return true;
}


/**
 * Restart daemon apply changes
 * only if daemon running...
 *
 * @return boolean successfull
*/
//boolean ApplyChanges () {
  



//}


/**
 * Write firewall configuration
 *
 * @return boolean successfull
*/

boolean WriteFirewallSettings() {

string port_range = "";
string active_port = "";

if (SuSEFirewall::IsStarted()) {
   if (EDIT_SETTINGS["PassiveMode"]:nil == "YES") {
      port_range = EDIT_SETTINGS["PasMinPort"]:nil +":"+ EDIT_SETTINGS["PasMaxPort"]:nil;
   } else {
      active_port = (PortAliases::IsKnownPortName("ftp-data") ? "ftp-data" : "20");
   }

   map <string, list<string> > suse_config = $[
     "tcp_ports" : [ 
        (PortAliases::IsKnownPortName("ftp") ? "ftp":"21"), 
        ((active_port != "")? active_port : port_range )],
     ];

   if (vsftpd_edit)
      return SuSEFirewallServices::SetNeededPortsAndProtocols("service:vsftpd", suse_config);
   else
      return SuSEFirewallServices::SetNeededPortsAndProtocols("service:pure-ftpd", suse_config);
} else {
   return true;
}

}

/**
 * Write value from UI 
 * to temporary structure
 *
 * @param string key of EDIT_SETTINGS map
 * @param string value of "key" EDIT_SETTINGS map
 * @return boolean successfull
*/

global boolean WriteToEditMap (string key, string value) {
  EDIT_SETTINGS[key]= value;
  return true;  
}




/**
 * Write current configuration
 *
 * @return boolean successfull
*/
global boolean WriteSettings () {
  boolean result = false;
  result = WriteToSETTINGS();
  if (vsftpd_edit) {
     if (result) {
	result = WriteVSFTPDSettings();
     }
  } else {    
     if (result) {
	result = WritePUREFTPDSettings();
     }
     // write homedirectory for anonymous user (ftp) 
     // fto user will be change only for pure-ftpd
     // vsftpd change option anon_root 
     if ((EDIT_SETTINGS["VirtualUser"]:nil == "NO") && (!vsftpd_edit)) {
        if (result) {
	   if ((EDIT_SETTINGS["FtpDirAnon"]:nil != anon_homedir) &&
              (anon_homedir != "") && (anon_homedir != nil)) {
              string error = Users::EditUser($["homeDirectory":EDIT_SETTINGS["FtpDirAnon"]:nil]);
              if ((error != nil) && (error != "")) {
                 result= false;
                 Popup::Error(error);
	      }
              if (result)
	         if (Users::CommitUser ()) {
		    Users::SetGUI (false);  
		    error = Users::Write();
                    if ((error != nil) && (error != "")) {
		       Popup::Error(error);
		       result = false;
                    }
                 } //end of if (Users::CommitUser ()) {
	   } //end of if ((EDIT_SETTINGS["FtpDirAnon"]:nil != anon_homedir) &&
        } //end of if (result) {
     } //end of if (EDIT_SETTINGS["VirtualUser"]:nil == "NO") {
     
  } // end of } else {

  if (result) {
     result = WriteFirewallSettings();

  }
  if (result) {
     // write configuration to the firewall
     boolean progress_orig = Progress::set (false);
     result = SuSEFirewall::Write ();
     Progress::set (progress_orig);
  }
  return result; 
}

/**
 * Write current configuration
 *
 * @return boolean result of function (true/false)
 */
global boolean WriteXinetd () {
  boolean result = false;  
  if (vsftpd_xined_id != -1) {
     result = WriteStartViaXinetd (start_xinetd, false);
  }
  return result; 
}

/**
 * Ask for creation upload directory
 * It is necessary if user want to allow uploading for anonymous
 * @return boolean result of function (true/false)
 */
global boolean WriteUpload () {
  boolean result = true;
  string command ="";
  string upload =""; 
  map options = $[];
  integer authentication = tointeger(EDIT_SETTINGS["AnonAuthen"]:nil);
  if ((vsftpd_edit) && (authentication != 1)  && (create_upload_dir) && (upload_good_permission)) {
     boolean write_enable = ((EDIT_SETTINGS["EnableUpload"]:nil == "YES") ? true:false);
     boolean anon_upload = ((EDIT_SETTINGS["AnonReadOnly"]:nil == "NO") ? true:false);
     boolean anon_create_dirs = ((EDIT_SETTINGS["AnonCreatDirs"]:nil == "YES") ? true:false);
     if ((write_enable) && ((anon_upload) || (anon_create_dirs)))        
        if (substring (anon_homedir, (size(anon_homedir)-1)) == "/")
           upload ="upload";
        else
           upload ="/upload";        
        command = "dir=`ls ";
        command = command + anon_homedir;
        command = command + " | grep upload`; if [ -z $dir ]; then mkdir ";
        command = command + anon_homedir +upload + "; chown ";
        
        if (EDIT_SETTINGS["GuestUser"]:nil !="")
           command = command + EDIT_SETTINGS["GuestUser"]:nil +":"+EDIT_SETTINGS["GuestUser"]:nil;           
        else if (EDIT_SETTINGS["FTPUser"]:nil !="") 
           command = command + EDIT_SETTINGS["FTPUser"]:nil +":"+EDIT_SETTINGS["FTPUser"]:nil; 
        
        command = command + " " + anon_homedir + upload + "; chmod 766 ";
        command = command + anon_homedir +upload + "; else chmod 766 " + anon_homedir +upload+"; fi";
/*        
"dir=`ls /srv/ftp/ | grep upload`; if [ -z $dir ]; then echo $dir; mkdir /srv/ftp/upload; 
 chown ftp:ftp /srv/ftp/upload/; chmod 755 /srv/ftp/upload; else chmod 766 /srv/ftp/upload/; fi"
*/
        y2milestone("[ftp-server] (WriteUpload) bash command for creating upload dir : %1", command);
        options = (map)SCR::Execute (.target.bash_output, command);
	if (options["exit"]:nil ==  0)
           result = true;
        else
           result = false; 

        //Popup::Message(command);

  } else {
    result = true;
  }
  //restart/reaload daemons...
  if (vsftpd_edit) {
     if (Service::Status("vsftpd") == 0)
        options = (map)SCR::Execute (.target.bash_output, "rcvsftpd restart");
  } else {

    if (Service::Status("pure-ftpd") == 0)
       options = (map)SCR::Execute (.target.bash_output, "rcpure-ftpd restart");
  }

  //update permissions for home directory if upload is enabled...
  if ((pure_ftp_allowed_permissios_upload != -1) && (change_permissions)) {
     if (vsftpd_edit) {
        command = "chmod 755 " + anon_homedir;
        options = (map)SCR::Execute (.target.bash_output, command);
     } else {
        command = "chmod 777 " + anon_homedir;
        options = (map)SCR::Execute (.target.bash_output, command);
     }
  }

  return result;
}
/**
 * read value from  PURE_EDIT_SETTINGS
 * 
 * @param  string key for edit map (ID of option)
 * @return string value of key from edit map
 */

global string ValueUIEdit (string key) {
  return EDIT_SETTINGS[key]:nil;
}



/**
 */
global boolean ftps = true;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/*
 * Abort function
 * @return boolean return true if abort
 *
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
	return AbortFunction () == true;
    }
    return false;
}*/

/**
 * Returns whether the configuration has been modified.
 *
 * @return boolean modified
 */
global boolean GetModified() {
    return modified;
}


/**
 * Returns a confirmation popup dialog whether user wants to really abort.
 *
 * @return boolean result of Popup::ReallyAbort(GetModified()
 */
global boolean Abort() {
    return Popup::ReallyAbort(GetModified());
}

/**
 * Checks whether an Abort button has been pressed.
 * If so, calls function to confirm the abort call.
 *
 * @return boolean true if abort confirmed
 */
global boolean PollAbort() {
    if (Mode::commandline())
	return false;
    if (UI::PollInput() == `abort)
	return Abort();

    return false;
}



/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}



/**
 * Read all FtpServer settings
 * @return true on success
 */
global boolean Read() {

  /* FtpServer read dialog caption */
  string caption = _("Initializing FTP Configuration");
  integer steps = 2;   

  // Part for commandline - it is necessary choose daemon if both are installed
  if (Mode::commandline()) {
     vsftpd_installed = Package::Installed("vsftpd");
     pureftpd_installed = Package::Installed("pure-ftpd");

     if ((vsftpd_installed)&&(pureftpd_installed)) {
	if (CommandLine::Interactive()) {
	   CommandLine::Print(String::UnderlinedHeader(_("You have installed both daemons:"), 0));
           CommandLine::Print(_("Please choose one of them for configuration."));
           CommandLine::Print(_("Do you want to configure vsftpd? Alternatively choose pure-ftpd"));
	   CommandLine::Print("");
           if (CommandLine::YesNo())
              vsftpd_edit = true;
	} else {
	   CommandLine::Error(_("You have installed both daemons. Therefore you have to run the configuration in interactive mode."));
           return false;
	}
     }
     if ((vsftpd_installed)&&(!pureftpd_installed))
        vsftpd_edit = true;
      
     if ((!vsftpd_installed)&&(!pureftpd_installed))
        return false;
  }

    // We do not set help text here, because it was set outside
  Progress::New( caption, " ", 
    steps, [
      /* Progress stage 1/2 */
      _("Read settings from the config file"),
      /* Progress stage 2/2 */
      _("Read the previous settings")
      ], [
      /* Progress stage 1/2 */
      _("Reading the settings..."),
      Message::Finished()
      ],
      ""
  ); //end of Progress::New( caption, " "

  // read settings
  if (PollAbort()) return false;
  Progress::NextStage();
  // calling read function for reading settings form config file
  if (!ReadSettings()) Report::Error(_("Cannot Read Current Settings."));
  sleep(sl); 

  if (PollAbort()) return false;
  /* Progress finished */
  Progress::NextStage();
  sleep(sl);

  if (PollAbort()) return false;
  modified = false;
  return true;
}

/**
 * Write all FtpServer settings
 * @return true on success
 */
global boolean Write() {

  /* FtpServer read dialog caption */
  string caption = _("Saving FTP Configuration");
  integer steps = 3;

  // We do not set help text here, because it was set outside
  Progress::New(caption, " ", 
    steps, [
      /* Progress stage 1/2 */
      _("Write the settings to the config file"),
      /* Progress stage 2/2 */
      _("Write the settings for starting daemon")
      ], [
      /* Progress step 1/1 */
      _("Writing the settings..."),
      Message::Finished()
      ],
      ""
  ); //end of Progress::New(caption, " "

  // write settings
  if (PollAbort()) return false;
  Progress::NextStage();
  // write options to the config file
  if(!WriteSettings ()) Report::Error (_("Cannot write settings!"));
  sleep(sl);

  if (PollAbort()) return false;
  Progress::NextStage ();
  // write settings for starting daemon
  if (!WriteXinetd ()) Report::Error (_("Cannot write settings for xinetd!"));
  sleep(sl);

  if (PollAbort()) return false;
  Progress::NextStage ();
  // write settings for starting daemon
  if (!WriteUpload ()) Report::Error (_("Cannot create upload directory for anonymous connections!"));
  sleep(sl);
  

  if(PollAbort()) return false;
  /* Progress finished */
  Progress::NextStage();
  sleep(sl);

  if(PollAbort()) return false;
  return true;
}

/**
 * Get all FtpServer settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
  boolean result = true;
  foreach (string key, UI_keys, {
    string val = (string) settings[key]:nil;
    if (val != nil) EDIT_SETTINGS[key] = val;
    if (val == nil) EDIT_SETTINGS[key] = DEFAULT_CONFIG[key]:nil; 
    }
  );        
  return result;
}

/**
 * Set which daemon will be configured
 * (For use by autoinstallation.)
 * 
 * @return boolean True on success
 */
global boolean InitDaemon () {
  boolean result = true;
  //Checking if ftp daemons are installed
  integer rad_but = 0;
  integer vsftpd_init_count = 0;
  integer pureftpd_init_count = 0;
  any ret = nil;
  if (Package::Installed("vsftpd")) {
     vsftpd_init_count = vsftpd_init_count + 1;
     vsftpd_installed = true;
  }
  if (Package::Installed("pure-ftpd")) {
     pureftpd_init_count = pureftpd_init_count + 1;
     pureftpd_installed = true;
  }
  if (pureftpd_installed && vsftpd_installed) {
     if (Service::Enabled("pure-ftpd")) 
        pureftpd_init_count = pureftpd_init_count + 1;

     if (Service::Enabled("vsftpd")) 
        vsftpd_init_count = vsftpd_init_count + 1;

     //Checking status of ftp daemons

     if (Service::Status("vsftpd") == 0)
        vsftpd_init_count = vsftpd_init_count + 1;
 
     if (Service::Status("pure-ftpd") == 0)
        pureftpd_init_count = pureftpd_init_count + 1;

     if (pureftpd_init_count == vsftpd_init_count) {
        vsftpd_edit = false;
     } else if (pureftpd_init_count < vsftpd_init_count) {
        vsftpd_edit = false;
     } else {
       vsftpd_edit = true;
     }  
  } else if (pureftpd_installed && !vsftpd_installed) {
     result = true;
     vsftpd_edit = false;
  } else if (!pureftpd_installed && vsftpd_installed) {
    result = true;
    vsftpd_edit = true;
  } else {
    result = true;
    vsftpd_edit = false;
  } 
  return result;
}



/**
 * Dump the FtpServer settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
  return EDIT_SETTINGS;
}

/**
 * Create unsorted list of options
 * @return string Returnes string with RichText-formated list
 */
global define string OptionsSummary() ``{
  string S = "";
  string option = "";
  //start FTP daemon
  string value = EDIT_SETTINGS["StartDaemon"]:nil;   
  if (value == "0") {
     option = "manually";
  } else if (value == "1") {
     option = "via xinetd";
  } else {
     option = "via inetd";
  }
  S = sformat("%1<li>Start Deamon: <i>(%2)</i>", S, option);
  value = EDIT_SETTINGS["AnonAuthen"]:nil;
  if (value == "0") {
     option = "Anonymous Only";
  } else if (value == "1") {
     option = "Authenticated Only";
  } else {
     option = "Both";
  }
  S = sformat("%1<li>Access: <i>(%2)</i>", S, option);
  // anonymous dir
  if (value != "1") {
     S = sformat("%1<li>Anonymous Directory: <i>(%2)</i>", S, EDIT_SETTINGS["FtpDirAnon"]:nil);
     S = sformat("%1<li>Anonymous Read Only: <i>(%2)</i>", S, EDIT_SETTINGS["AnonReadOnly"]:nil);
     S = sformat("%1<li>Anonymous Can Create Directory: <i>(%2)</i>", S, EDIT_SETTINGS["AnonCreatDirs"]:nil);
  }
  if (S == "")
     S = _("<p><ul><i>FTP daemon is not configured.</i></ul></p>");
  return S;
}



/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global define string Summary() {    
  string S = "";
  if(size(EDIT_SETTINGS) == 0) {
    /*
     * Translators: Summary head, if nothing configured
     */
    S = Summary::AddHeader(S, _("FTP daemon"));
    S = Summary::AddLine(S, Summary::NotConfigured());
  } else {
    /*
     * Translators: Summary head, if something configured
     */
    string head = sformat(_("FTP daemon %1"), (vsftpd_edit ? "vsftpd" : "pure-ftpd"));
    S = Summary::AddHeader(S, head);
    S = Summary::AddHeader(S, _("These options will be configured"));
    S = sformat("%1<ul>%2</ul></p>", S, OptionsSummary());
  }
  return S;
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    return [];
}

/**zzz
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
  if (vsftpd_edit)  
     return $[ "install":["vsftpd"], "remove":[] ];
  else
     return $[ "install":["pure-ftpd"], "remove":[] ];
}

/* EOF */
}
